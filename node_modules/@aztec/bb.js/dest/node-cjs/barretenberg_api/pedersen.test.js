"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("../barretenberg/index.js");
const index_js_2 = require("../types/index.js");
describe('pedersen', () => {
    let api;
    beforeAll(async () => {
        api = await index_js_1.Barretenberg.new(1);
        await api.pedersenHashInit();
    }, 30000);
    afterAll(async () => {
        await api.destroy();
    });
    it('pedersenCompressFields', async () => {
        const result = await api.pedersenCompressFields(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n));
    });
    it('pedersenCompress', async () => {
        const result = await api.pedersenCompress([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(16354408412011670665169322571938780771784319449166930406648760506154417354381n));
    });
    it('pedersenCompressWithHashIndex', async () => {
        const result = await api.pedersenCompressWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(result).toEqual(new index_js_2.Fr(2152386650411553803409271316104075950536496387580531018130718456431861859990n));
    });
    it('pedersenCompressAndHashSame', async () => {
        const resultCompress = await api.pedersenCompressWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        const resultHash = await api.pedersenHashWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(resultCompress).toEqual(resultHash);
    });
    it('pedersenHashWith0IndexSameAsNoIndex', async () => {
        const resultHashImplicit0 = await api.pedersenHash([new index_js_2.Fr(4n), new index_js_2.Fr(8n)]);
        const resultCompressImplicit0 = await api.pedersenCompress([new index_js_2.Fr(4n), new index_js_2.Fr(8n)]);
        const resultCompressFieldsImplicit0 = await api.pedersenCompressFields(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        const resultHashExplicit0 = await api.pedersenHashWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 0);
        expect(resultHashImplicit0).toEqual(resultCompressImplicit0);
        expect(resultHashImplicit0).toEqual(resultHashExplicit0);
        expect(resultHashImplicit0).toEqual(resultCompressFieldsImplicit0);
    });
    it('pedersenHashPairSameAsWith0Index', async () => {
        const resultHashPair = await api.pedersenHashPair(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        const resultHashExplicit0 = await api.pedersenHashWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 0);
        expect(resultHashExplicit0).toEqual(resultHashPair);
    });
    it('pedersenHashMultipleSameAsWith0Index', async () => {
        const resultHashPair = await api.pedersenHashMultiple([new index_js_2.Fr(4n), new index_js_2.Fr(8n)]);
        const resultHashExplicit0 = await api.pedersenHashWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 0);
        expect(resultHashExplicit0).toEqual(resultHashPair);
    });
    it('pedersenCommit', async () => {
        const result = await api.pedersenCommit([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(18374309251862457296563484909553154519357910650678202211610516068880120638872n));
    });
    it('pedersenHashPair', async () => {
        const result = await api.pedersenHashPair(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n));
    });
    it('pedersenHashMultiple', async () => {
        const result = await api.pedersenHashMultiple([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(16354408412011670665169322571938780771784319449166930406648760506154417354381n));
    });
    it('pedersenHashMultipleWithHashIndex', async () => {
        const result = await api.pedersenHashMultipleWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(result).toEqual(new index_js_2.Fr(2152386650411553803409271316104075950536496387580531018130718456431861859990n));
    });
    it('pedersenHashToTree', async () => {
        const result = await api.pedersenHashToTree([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n), new index_js_2.Fr(16n)]);
        expect(result).toEqual([
            new index_js_2.Fr(4n),
            new index_js_2.Fr(8n),
            new index_js_2.Fr(12n),
            new index_js_2.Fr(16n),
            new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n),
            new index_js_2.Fr(18350527319045519333962768191016242826584323959670139897255818770108115223653n),
            new index_js_2.Fr(5972535902427608430534212385621973704186819235181735133037695406667218179357n),
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVkZXJzZW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYXJyZXRlbmJlcmdfYXBpL3BlZGVyc2VuLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBd0Q7QUFDeEQsZ0RBQXVDO0FBRXZDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLElBQUksR0FBaUIsQ0FBQztJQUV0QixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsR0FBRyxHQUFHLE1BQU0sdUJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFVixRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsc0JBQXNCLENBQUMsSUFBSSxhQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxhQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksYUFBRSxDQUFDLDZFQUE2RSxDQUFDLENBQUMsQ0FBQztJQUNoSCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksYUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksYUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksYUFBRSxDQUFDLEdBQUcsQ0FB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